@model SidBy.Sklad.Web.Models.ContractorDetailsModel
@using SidBy.Sklad.Web.Models
@using Trirand.Web.Mvc

<table class="sklad-top-menu">
    <tr>
         <td colspan="2">
             <a href="@Url.Action("Contractor","Reference")">Вернуться к списку контрагентов</a>
         </td>
        <td rowspan="2"><button id="ContractorPrintReport" name="ContractorPrintReport">Экспорт в Excel</button> </td>
    </tr>
    <tr>
        <td><div class="sklad-title">Список документов для @Model.Company.Name (@Model.Company.Code)</div></td>
        <td></td>
    </tr>
    <tr>
        <td colspan="3">
           
     @*       Ответственный - <strong>@Model.Company.Responsible.DisplayName 
            (@Model.Company.Responsible.Surname @Model.Company.Responsible.Name @Model.Company.Responsible.MiddleName)</strong>
            @(!String.IsNullOrEmpty(@Model.Company.Responsible.Phone1) ? " т. " + @Model.Company.Responsible.Phone1 : "" )
            @(!String.IsNullOrEmpty(@Model.Company.Responsible.Phone2) ? " т. " + @Model.Company.Responsible.Phone2 : "" )
            @(Html.Raw(!String.IsNullOrEmpty(@Model.Company.Responsible.UserEmail) ? "<a href=\"mailto:"+@Model.Company.Responsible.UserEmail+"\">"+ @Model.Company.Responsible.UserEmail+"</a>" : "" ))
            @(!String.IsNullOrEmpty(@Model.Company.Responsible.Skype) ? " Skype: " + @Model.Company.Responsible.Skype : "" )*@
        </td>
    </tr>
    <tr><td colspan="2">@*@Model.Company.Responsible.Comment*@</td></tr>
</table>

@{
    string jqGridDocumentsId = "Documents1";
    string jqGridProductsId = "Products1";    
}

@*<input type="hidden" value="@Model.Company.ContractorId" id="ContractorId" name="ContractorId" />*@
@Html.Trirand().JQGrid(Model.DocumentGrid, jqGridDocumentsId)
@Html.Trirand().JQGrid(Model.ProductLineGrid, jqGridProductsId)

      <script type="text/javascript">
          var urlParams;
          (window.onpopstate = function () {
              var match,
                  pl = /\+/g,  // Regex for replacing addition symbol with a space
                  search = /([^&=]+)=?([^&]*)/g,
                  decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
                  query = window.location.search.substring(1);

              urlParams = {};
              while (match = search.exec(query))
                  urlParams[decode(match[1])] = decode(match[2]);
          })();


          $(document).ready(function () {
              $("#ContractorPrintReport").button().click(function () {
                  $.ajax({
                      type: "POST",
                      url: "@Url.Action("GetContractorPrintReportFileLink", "MyCompany")",
                      success: function (data) {
                          // redirect to url
                          window.location.replace(data);
                      },
                      data: {
                          "contractorId": urlParams["contractorId"],
                          "periodFrom": convertDateStringToJson(getParameterByName("periodFrom")) /*.toJSONLocal()*/,
                          "periodTo": convertDateStringToJson(getParameterByName("periodTo")),
                      }
                  });
              });
          });

            function showProductsSubGrid(subgrid_id, row_id) {
                // the "showSubGrid_OrdersGrid" function is autogenerated and available globally on the page by the second child grid.
                // Calling it will place the child grid below the parent expanded row and will call the action specified by the DaraUrl property
                // of the child grid, with ID equal to the ID of the parent expanded row

                // showSubGrid_OrdersGrid
                //showSubGrid_{GridID},
                showSubGrid_Products1(subgrid_id, row_id);
            }
        </script>





@Html.Trirand().JQDatePicker(new JQDatePicker { 
    MaxDate = DateTime.MaxValue,
    MinDate = new DateTime(2013,1,1),
    DisplayMode = DatePickerDisplayMode.ControlEditor,
    ShowOn = ShowOn.Focus,
    OnSelectedCallbackFunction = "CreatedOfPickerDateSelectedTrigger",
}, "CreatedOfPicker")

@Html.Trirand().JQDatePicker(new JQDatePicker { 
    MaxDate = DateTime.MaxValue,
    MinDate = new DateTime(2013,1,1),
    DisplayMode = DatePickerDisplayMode.ControlEditor,
    ShowOn = ShowOn.Focus,
    OnSelectedCallbackFunction = "CreatedOfPickerDateSelectedTrigger",
}, "PlannedDatePicker")

<script type="text/javascript">
    function CreatedOfPickerDateSelectedTrigger(dateText, inst) {
        //var sgrid = $("#@jqGridDocumentsId")[0];
       // sgrid.triggerToolbar();
    }

    function formatDocumentEditLink(cellvalue, options, rowObject) {
        return '<ul class="grid-ui-icons"><li><a href="/Home/Document?documentId='
            + cellvalue + '" title="Редактировать"><span class="ui-icon ui-icon-pencil"></span></a></li></ul>';
    }
    function unFormatDocumentEditLink(cellvalue, options, cell) {
        return $('img', cell).attr('src');
    }

    function customSummaryFunc(val, name, record) {
       // console.log(val);
        return parseFloat(val || 0) + parseFloat((record[name] || 0));
    }
</script>





