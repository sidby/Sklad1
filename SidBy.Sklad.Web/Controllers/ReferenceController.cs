using log4net;
using SidBy.Common.Helpers;
using SidBy.Sklad.DataAccess;
using SidBy.Sklad.Domain;
using SidBy.Sklad.Web.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Trirand.Web.Mvc;
using SidBy.Sklad.Domain.Enums;

namespace SidBy.Sklad.Web.Controllers
{
    [System.Web.Mvc.Authorize(Roles = "admin,employee")]
    public class ReferenceController : Controller
    {
        private readonly ILog logger;

        public ReferenceController()
        {
            logger = LogManager.GetLogger(GetType());
        }

        //#region Region
        //public ActionResult Region()
        //{
        //    ViewBag.Title = "Регион";
        //    // Get the model (setup) of the grid defined in the /Models folder.
        //    var gridModel = new SkladJqGridModel();
        //    var grid = gridModel.RegionGrid;

        //    // NOTE: you need to call this method in the action that fetches the data as well,
        //    // so that the models match
        //    RegionSetupGrid(grid);

        //    // Pass the custmomized grid model to the View
        //    return View(gridModel);
        //}

        //// This method is called when the grid requests data
        //public JsonResult RegionSearchGridDataRequested()
        //{
        //    // Get both the grid Model and the data Model
        //    // The data model in our case is an autogenerated linq2sql database based on Northwind.
        //    var gridModel = new SkladJqGridModel();
        //    var datacontextModel = new SkladDataContext();
        //    // customize the default grid model with our custom settings
        //    RegionSetupGrid(gridModel.RegionGrid);

        //    // return the result of the DataBind method, passing the datasource as a parameter
        //    // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
        //    return gridModel.RegionGrid.DataBind(datacontextModel.Regions);
        //}

        //private void RegionSetupGrid(JQGrid grid)
        //{
        //    SetUpGrid(grid, "RegionGrid1",
        //        Url.Action("RegionSearchGridDataRequested"),
        //        Url.Action("RegionEditRows"));
        //}

        //public ActionResult RegionEditRows(Region editedItem)
        //{
        //    // Get the grid and database models
        //    var gridModel = new SkladJqGridModel();
        //    var datacontextModel = new SkladDataContext();

        //    // If we are in "Edit" mode
        //    if (gridModel.RegionGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
        //    {
        //        // Get the data from and find the item corresponding to the edited row
        //        Region item = (from x in datacontextModel.Regions
        //                          where x.RegionId == editedItem.RegionId
        //                          select x).First<Region>();

        //        // update the item information
        //        UpdateRegion(item, editedItem);

        //        datacontextModel.SaveChanges();
        //    }

        //    if (gridModel.RegionGrid.AjaxCallBackMode == AjaxCallBackMode.AddRow)
        //    {
        //        // since we are adding a new item, create a new istance
        //        Region item = new Region();
        //        // set the new item information
        //        UpdateRegion(item, editedItem);

        //        datacontextModel.Regions.Add(item);
        //        datacontextModel.SaveChanges();
        //    }
        //    if (gridModel.RegionGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
        //    {
        //        Region item = (from x in datacontextModel.Regions
        //                          where x.RegionId == editedItem.RegionId
        //                          select x)
        //                       .First<Region>();

        //        // delete the record                
        //        datacontextModel.Regions.Remove(item);
        //        datacontextModel.SaveChanges();
        //    }

        //    return RedirectToAction("Region", "Reference");
        //}

        //private void UpdateRegion(Region item, Region editedItem)
        //{
        //    item.Name = editedItem.Name;
        //}

        //#endregion

        #region Contractor
        public ActionResult Contractor()
        {
            ViewBag.Title = "Контрагент";
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.ContractorGrid;

            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            ContractorSetupGrid(grid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data
        public JsonResult ContractorSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            ContractorSetupGrid(gridModel.ContractorGrid);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.ContractorGrid.DataBind(datacontextModel.Contractors);
        }

        private void ContractorSetupGrid(JQGrid grid)
        {
            SetUpGrid(grid, "ContractorGrid1",
                Url.Action("ContractorSearchGridDataRequested"),
                Url.Action("ContractorEditRows"));

            SetUpContractorEditDropDown(grid);
        }

        private void PrepareContractorData(Contractor contractor)
        {
            contractor.Name = (contractor.Name ?? String.Empty).Trim();
            contractor.Code = (contractor.Code ?? String.Empty).Trim();
            contractor.Phone = (contractor.Phone ?? String.Empty).Trim();
            contractor.Fax = (contractor.Fax ?? String.Empty).Trim();
            contractor.Email = (contractor.Email ?? String.Empty).Trim();
            contractor.ActualAddress = (contractor.ActualAddress ?? String.Empty).Trim();
            contractor.Comment = (contractor.Comment ?? String.Empty).Trim();
            contractor.ContactPersonName = (contractor.ContactPersonName ?? String.Empty).Trim();
         
            if (String.IsNullOrEmpty(contractor.Name))
                contractor.Name = contractor.Code;

            if (String.IsNullOrEmpty(contractor.Code))
                contractor.Code = contractor.Name;
        }

        private string ValidateContractorData(DbSet<Contractor> dbSet, Contractor contractor, bool isNew)
        {
            if (String.IsNullOrEmpty(contractor.Name))
                return "Имя пользователя обязательно";

            if (String.IsNullOrEmpty(contractor.Code))
                return "Отображаемое имя обязательно";

            if (isNew)
            {
                Contractor item = dbSet.Where(x =>
                    String.Compare(x.Code, contractor.Code, StringComparison.OrdinalIgnoreCase) == 0
                    || x.Name == contractor.Name).FirstOrDefault<Contractor>();

                if (item != null)
                    return "Контрагент с таким именем существует";
            }
            else
            {
                Contractor item = (from x in dbSet
                                   where x.ContractorId == contractor.ContractorId
                                   select x).First<Contractor>();

                // if DisplayName was changed
                if (item.Name.ToLower() != contractor.Name.ToLower())
                {
                    if ((from x in dbSet
                         where String.Compare(x.Name, contractor.Name, StringComparison.OrdinalIgnoreCase) == 0
                         select x).FirstOrDefault<Contractor>() != null)
                        return "Контрагент с таким именем существует";
                }

                // if UserName was changed
                if (item.Code.ToLower() != contractor.Code.ToLower())
                {
                    if ((from x in dbSet
                         where String.Compare(x.Code, contractor.Code, StringComparison.OrdinalIgnoreCase) == 0
                         select x).FirstOrDefault<Contractor>() != null)
                        return "Контрагент с таким именем существует";
                }
            }

            if (!String.IsNullOrEmpty(contractor.Email))
            {
                if (!ValidationHelper.IsValidEmail(contractor.Email))
                    return "Неверный формат email";
            }

            return String.Empty;
        }

        public ActionResult ContractorEditRows(Contractor editedItem)
        {
            // Get the grid and database models
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();

            // If we are in "Edit" mode
            if (gridModel.ContractorGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {
                PrepareContractorData(editedItem);

                string validationMessage = ValidateContractorData(datacontextModel.Contractors, editedItem, false);
                if (!String.IsNullOrEmpty(validationMessage))
                    return gridModel.ContractorGrid.ShowEditValidationMessage(validationMessage);

                // Get the data from and find the item corresponding to the edited row
                Contractor item = (from x in datacontextModel.Contractors
                               where x.ContractorId == editedItem.ContractorId
                               select x).First<Contractor>();

                // update the item information
                UpdateContractor(item, editedItem);

                datacontextModel.SaveChanges();
                logger.InfoFormat("контрагент изменён {0}", item.Code);

            }

            if (gridModel.ContractorGrid.AjaxCallBackMode == AjaxCallBackMode.AddRow)
            {
                PrepareContractorData(editedItem);

                string validationMessage = ValidateContractorData(datacontextModel.Contractors, editedItem, true);
                if (!String.IsNullOrEmpty(validationMessage))
                    return gridModel.ContractorGrid.ShowEditValidationMessage(validationMessage);

                // since we are adding a new item, create a new istance
                Contractor item = new Contractor() { IsArchived = false, CreatedAt = DateTime.Now };
                // set the new item information
                UpdateContractor(item, editedItem);

                datacontextModel.Contractors.Add(item);
                datacontextModel.SaveChanges();
                logger.InfoFormat("контрагент добавлен {0}", item.Code);

            }
            if (gridModel.ContractorGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {
                Contractor item = (from x in datacontextModel.Contractors
                                   where x.ContractorId == editedItem.ContractorId
                               select x)
                               .First<Contractor>();

                // delete the record                
                datacontextModel.Contractors.Remove(item);
                datacontextModel.SaveChanges();
                logger.InfoFormat("контрагент удалён {0}", item.Code);
            }

            return RedirectToAction("Contractor", "Reference");
        }

        private void SetUpContractorEditDropDown(JQGrid itemGrid)
        {
            // setup the grid search criteria for the columns
            JQGridColumn responsibleIdColumn = itemGrid.Columns.Find(c => c.DataField == "ResponsibleId");
            //JQGridColumn responsibleNameColumn = itemGrid.Columns.Find(c => c.DataField == "ResponsibleName");

            //JQGridColumn regionIdColumn = itemGrid.Columns.Find(c => c.DataField == "RegionId");
            JQGridColumn contractorTypeIdColumn = itemGrid.Columns.Find(c => c.DataField == "ContractorTypeId");

            // Populate the search dropdown only on initial request, in order to optimize performance
            if (itemGrid.AjaxCallBackMode == AjaxCallBackMode.RequestData)
            {
                var skladModel = new SkladDataContext();

                // Выбрать только Сотрудников и менеджеров
                var usersList = (from m in skladModel.UserProfiles where m.ContactTypeId < 3 select m).AsEnumerable()
                               .Select(x => new SelectListItem
                               {
                                   Text = x.DisplayName,
                                   Value = x.UserId.ToString()
                               });

                //var regionsList = (from m in skladModel.Regions select m).AsEnumerable()
                //              .Select(x => new SelectListItem
                //              {
                //                  Text = x.Name,
                //                  Value = x.RegionId.ToString()
                //              });

                var contractorTypesList = (from m in skladModel.ContractorTypes select m).AsEnumerable()
                            .Select(x => new SelectListItem
                            {
                                Text = x.Name,
                                Value = x.ContractorTypeId.ToString()
                            });

                responsibleIdColumn.EditList.AddRange(usersList.ToList<SelectListItem>());
                responsibleIdColumn.SearchList = usersList.ToList<SelectListItem>();
                responsibleIdColumn.SearchList.Insert(0, new SelectListItem { Text = "Все", Value = "" });

                //regionIdColumn.SearchList = regionsList.ToList<SelectListItem>();
                //regionIdColumn.SearchList.Insert(0, new SelectListItem { Text = "Все", Value = "" });
                //regionIdColumn.EditList.AddRange(regionsList.ToList<SelectListItem>());

                contractorTypeIdColumn.SearchList = contractorTypesList.ToList<SelectListItem>();
                contractorTypeIdColumn.SearchList.Insert(0, new SelectListItem { Text = "Все", Value = "" });
                contractorTypeIdColumn.EditList.AddRange(contractorTypesList.ToList<SelectListItem>());
            }
        }

        private void UpdateContractor(Contractor item, Contractor editedItem)
        {
            item.Name = (editedItem.Name ?? String.Empty).Trim();
            item.Code = (editedItem.Code ?? String.Empty).Trim();
            item.Phone = (editedItem.Phone ?? String.Empty).Trim();
            item.Fax = (editedItem.Fax ?? String.Empty).Trim();
            item.Email = (editedItem.Email ?? String.Empty).Trim();
            item.Region = (editedItem.Region ?? String.Empty).Trim();
            item.ActualAddress = (editedItem.ActualAddress ?? String.Empty).Trim();
            item.Comment = (editedItem.Comment ?? String.Empty).Trim();
            item.ResponsibleId = editedItem.ResponsibleId;
            item.ContractorTypeId = editedItem.ContractorTypeId;
            item.ContactPersonName = editedItem.ContactPersonName;
            item.MarginAbs = editedItem.MarginAbs;
        }

        #endregion

        #region Product

        public ActionResult Product()
        {
            ViewBag.Title = "Товар";
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.ProductGrid;

            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            ProductSetupGrid(grid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data
        public JsonResult ProductSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            ProductSetupGrid(gridModel.ProductGrid);

            string contractorIdStr = Request.QueryString["ContractorId"];
            if (!String.IsNullOrEmpty(contractorIdStr))
            {
                var contractor = datacontextModel.Contractors.Where(x =>
                    x.Code.ToLower() == contractorIdStr.ToLower()).FirstOrDefault();
                if (contractor != null)
                {

                    return gridModel.ProductGrid.DataBind(datacontextModel
                        .Products.Where(x => x.ContractorId == contractor.ContractorId).Include(x => x.Supplier));
                }
            }

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.ProductGrid.DataBind(datacontextModel.Products.Include(x => x.Supplier));
        }

        private void ProductSetupGrid(JQGrid grid)
        {
            SetUpGrid(grid, "ProductGrid1",
                Url.Action("ProductSearchGridDataRequested"),
                Url.Action("ProductEditRows"));

            grid.ToolBarSettings.ShowAddButton = false;
            SetUpProductSearchData(grid);
        }

        private void PrepareProductData(Product product)
        {
            product.Article = (product.Article ?? String.Empty).Trim().Replace(" ","");
            product.Description = (product.Description ?? String.Empty).Trim();
        }

        private string ValidateProductData(DbSet<Product> dbSet, Product product, bool isNew)
        {
            if (String.IsNullOrEmpty(product.Article))
                return "Артикул товара обязателен";

            if(product.Supplier == null)
                return "Не указан поставщик товара";
           
            if (isNew)
            {
                Product item = dbSet.Where(x =>
                    String.Compare(x.Article, product.Article, StringComparison.OrdinalIgnoreCase) == 0
                    && x.ContractorId == product.Supplier.ContractorId).FirstOrDefault<Product>();

                if (item != null)
                    return "Товар с таким артикулом существует";

                product.CreatedAt = DateTime.Now;
            }
            else
            {
                Product item = (from x in dbSet
                                   where x.ProductId == product.ProductId
                                   select x).First<Product>();

                // if Article was changed
                if (item.Article.ToLower() != product.Article.ToLower())
                {
                    if ((from x in dbSet
                         where String.Compare(x.Article, product.Article, StringComparison.OrdinalIgnoreCase) == 0
                         select x).FirstOrDefault<Product>() != null)
                        return "Товар с таким артикулом существует";
                }

                product.ModifiedAt = DateTime.Now;
            }

            return String.Empty;
        }

        public ActionResult ProductEditRows(Product editedItem)
        {
            // Get the grid and database models
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();

            // If we are in "Edit" mode
            if (gridModel.WarehouseGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {
                // Get the data from and find the item corresponding to the edited row
                Product item = (from x in datacontextModel.Products
                                where x.ProductId == editedItem.ProductId
                                  select x).First<Product>();

                // update the item information
                UpdateProduct(item, editedItem);

                datacontextModel.SaveChanges();
            }

            if (gridModel.WarehouseGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {
                Product item = (from x in datacontextModel.Products
                                where x.ProductId == editedItem.ProductId
                                  select x)
                               .First<Product>();

                // delete the record                
                datacontextModel.Products.Remove(item);
                datacontextModel.SaveChanges();
            }

            return RedirectToAction("Product", "Reference");
        }

        private void SetUpProductSearchData(JQGrid itemGrid)
        {
            // setup the grid search criteria for the columns
            JQGridColumn contractorIdColumn = itemGrid.Columns.Find(c => c.DataField == "ContractorId");
        
            // Populate the search dropdown only on initial request, in order to optimize performance
            if (itemGrid.AjaxCallBackMode == AjaxCallBackMode.RequestData)
            {
                //var skladModel = new SkladDataContext();

                //// Выбрать только Фабрики
                //var contractorList = (from m in skladModel.Contractors 
                //                      where m.ContractorTypeId == (int)EntityEnum.ContractorTypeEnum.Factory 
                //                      && m.IsArchived == false
                //                      select m).AsEnumerable()
                //            .Select(x => new SelectListItem
                //            {
                //                Text = x.Code,
                //                Value = x.ContractorId.ToString()
                //            });

                //contractorIdColumn.SearchList = contractorList.ToList<SelectListItem>();
            }
        }

        public JsonResult GetSupplierByCode(string term)
        {
            var datacontextModel = new SkladDataContext();

            var result = (from u in datacontextModel.Contractors
                          where u.Code.ToLower().Contains(term.ToLower()) && u.ContractorTypeId == 
                          (int)EntityEnum.ContractorTypeEnum.Factory
                          select new { u.Code, u.ContractorId, u.Name }).ToList();

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetClientByCode(string term)
        {
            var datacontextModel = new SkladDataContext();

            var result = (from u in datacontextModel.Contractors
                          where u.Code.ToLower().Contains(term.ToLower()) && u.ContractorTypeId ==
                          (int)EntityEnum.ContractorTypeEnum.Client
                          select new { u.Code, u.ContractorId, u.Name }).ToList();

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetSupplierByCodeAutoComplete(string term)
        {
            var datacontextModel = new SkladDataContext();

            var result = (from u in datacontextModel.Contractors
                          where u.Code.ToLower().Contains(term.ToLower()) && u.ContractorTypeId ==
                          (int)EntityEnum.ContractorTypeEnum.Factory
                          select u.Code).ToList();
            // "name":"ContractorId","index":"ContractorId"
            //  return new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = dataSource.ToListOfString(this) };
            // List<string>
             //22 - Бьюти
            return new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = result };
        }
       
        public void AddNewProduct(int contractorId,
           string article,
           decimal purchaseprice,
           decimal saleprice,
           decimal vat)
        {
            if (contractorId <= 0 || String.IsNullOrEmpty(article))
                return;

            Product item = new Product()
            {
                Article = article,
                PurchasePrice = purchaseprice,
                SalePrice = saleprice,
                VAT = vat,
                ContractorId = contractorId
            };

            var datacontextModel = new SkladDataContext();

            PrepareProductData(item);

            item.Supplier = (from x in datacontextModel.Contractors
                                  where x.ContractorId == item.ContractorId &&
                                  x.ContractorTypeId == (int)EntityEnum.ContractorTypeEnum.Factory
                                  select x).First<Contractor>();

            if (item.Supplier == null)
            {
                logger.ErrorFormat("для товара {0} не найден поставщик с id={1}", item.Article, item.ContractorId);
                return;
            }

            string validationMessage = ValidateProductData(datacontextModel.Products, item, true);
            if (!String.IsNullOrEmpty(validationMessage))
            {
                logger.Error(validationMessage);
                return;
            }

            datacontextModel.Products.Add(item);
            datacontextModel.SaveChanges();

            logger.InfoFormat("Создан товар {0} от поставщика {1}", item.Article, item.Supplier.Code);
        }

        private void UpdateProduct(Product item, Product editedItem)
        {
            item.Article = (editedItem.Article ?? String.Empty).Trim();
            item.PurchasePrice = editedItem.PurchasePrice;
            item.SalePrice = editedItem.SalePrice;
            item.VAT = editedItem.VAT;
            item.ContractorId = editedItem.ContractorId;
            item.Description = (editedItem.Description ?? String.Empty).Trim();
        }

        #endregion

        private void SetUpGrid(JQGrid grid, string gridID, string dataUrl, string editUrl)
        {
            // Customize/change some of the default settings for this model
            // ID is a mandatory field. Must by unique if you have several grids on one page.
            grid.ID = gridID;

            // Setting the DataUrl to an action (method) in the controller is required.
            // This action will return the data needed by the grid
            grid.DataUrl = dataUrl;
            grid.EditUrl = editUrl;
            // show the search toolbar
            grid.ToolBarSettings.ShowSearchToolBar = true;

            grid.ToolBarSettings.ShowEditButton = true;
            grid.ToolBarSettings.ShowAddButton = true;
            grid.ToolBarSettings.ShowDeleteButton = true;
            grid.EditDialogSettings.CloseAfterEditing = true;
            grid.AddDialogSettings.CloseAfterAdding = true;
        }

    }
}
