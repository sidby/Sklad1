using SidBy.Sklad.DataAccess;
using SidBy.Sklad.Domain;
using SidBy.Sklad.Domain.Enums;
using SidBy.Sklad.Domain.Models;
using SidBy.Sklad.Web.Filters;
using SidBy.Sklad.Web.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Web.Mvc;
using System.Web.Security;
using Trirand.Web.Mvc;
using WebMatrix.WebData;

namespace SidBy.Sklad.Web.Controllers
{
    //[InitializeSimpleMembership]
    [System.Web.Mvc.Authorize(Roles = "admin,employee,limitedemployee")]
    public class IndicatorsController : Controller
    {
        public ActionResult Index()
        {
            ViewBag.Message = "Графики на Highcharts.";

            var gridModel = new LogJqGridModel();
            var grid = gridModel.LogGrid;

            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            LogSetupGrid(grid);

            IndicatorsModel model = new IndicatorsModel() { LogGrid = gridModel };
            SkladDataContext context = new SkladDataContext();
         
            // Check permissions
            int currentUserId = WebSecurity.CurrentUserId;
            string[] roles = Roles.GetRolesForUser(WebSecurity.CurrentUserName);
            if (roles.Contains("limitedemployee"))
            {
                IQueryable<UserProfile> userProfiles = context.UserProfiles.Where(x => x.UserId == currentUserId);
                model.Employees = userProfiles;
                model.Managers = userProfiles;
            }
            else
            {
                model.Employees = context.UserProfiles.Where(x => x.ContactTypeId == (int)EntityEnum.ContactTypeEnum.Employee);
                model.Managers = context.UserProfiles
                .Where(x => x.ContactTypeId == (int)EntityEnum.ContactTypeEnum.Manager || x.ContactTypeId == (int)EntityEnum.ContactTypeEnum.Employee);
            }
            /*employee
             
            var result = (from u in datacontextModel.UserProfiles
                          where u.DisplayName.ToLower().Contains(term.ToLower()) && (u.ContactTypeId ==
                          (int)EntityEnum.ContactTypeEnum.Manager || u.ContactTypeId == (int)EntityEnum.ContactTypeEnum.Employee)
                          select new { u.DisplayName, u.UserId }).ToList();
             */

            return View(model);
        }

        public JsonResult LogSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new LogJqGridModel();
            var datacontextModel = new LoggingDataContext();
            // customize the default grid model with our custom settings
            LogSetupGrid(gridModel.LogGrid);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.LogGrid.DataBind(datacontextModel.Logs.OrderByDescending(x => x.Date));
        }

        private void LogSetupGrid(JQGrid grid)
        {
            grid.ID = "Log1";

            // Setting the DataUrl to an action (method) in the controller is required.
            // This action will return the data needed by the grid
            grid.DataUrl = Url.Action("LogSearchGridDataRequested");
            grid.ToolBarSettings.ShowSearchToolBar = true;

        }

        public JsonResult GetHalfYearReport(
            int monthFromNumber, int yearFromNumber,
            int monthToNumber, int yearToNumber,
            int employeeId) {
            ReportData report = new ReportData(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString);

            var reportData = report.GetSalesReport(yearFromNumber, yearToNumber, monthFromNumber, monthToNumber,
                EntityEnum.DocumentTypeEnum.Shipment, EntityEnum.ReportTypeEnum.ByMonth, employeeId);

            var jsonResult = new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = reportData };
            return jsonResult;
        }

        public JsonResult GetReportByContractor(int monthFromNumber, int yearFromNumber,
            int monthToNumber, int yearToNumber, int managerId)
        { 
            ReportData report = new ReportData(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString);
            var reportData = report.GetSalesReportByContractor(yearFromNumber, yearToNumber, monthFromNumber, monthToNumber, managerId);
            var jsonResult = new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = reportData };
            return jsonResult;
        }

        public JsonResult GetMonthReport(int monthNumber, int yearNumber, int employeeId)
        {
           // StringBuilder sb = new StringBuilder();
            ReportData report = new ReportData(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString);
            int monthToNumber = monthNumber;
            int yearToNumber = yearNumber;
            if (monthNumber == 12)
            {
                monthToNumber = 1;
                yearToNumber = yearNumber + 1;
            }
            else {
                monthToNumber = monthNumber + 1;
            }

            var reportData = report.GetSalesReport(yearNumber, yearToNumber, monthNumber, monthToNumber,
                EntityEnum.DocumentTypeEnum.Shipment, EntityEnum.ReportTypeEnum.ByDay, employeeId);
            //foreach (var reportItem in reportData)
            //{ 
            
            //}
            var jsonResult = new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = reportData };
            return jsonResult;
        }

    }
}
