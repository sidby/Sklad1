using log4net;
using SidBy.Common.Crypt;
using SidBy.Common.Helpers;
using SidBy.Sklad.DataAccess;
using SidBy.Sklad.Domain;
using SidBy.Sklad.Domain.Enums;
using SidBy.Sklad.Web.BL;
using SidBy.Sklad.Web.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using System.Web.UI.WebControls;
using Trirand.Web.Mvc;
using WebMatrix.WebData;


namespace SidBy.Sklad.Web.Controllers
{
    [System.Web.Mvc.Authorize(Roles = "admin,employee")]
    public class MyCompanyController : Controller
    {
        private readonly ILog logger;

        public MyCompanyController()
        {
            logger = LogManager.GetLogger(GetType());
        }

        #region LegalEntity
        public ActionResult LegalEntity()
        {
            ViewBag.Title = "Юр. лица";
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.LegalEntityGrid;

            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            LegalEntitySetupGrid(grid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data
        public JsonResult LegalEntitySearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            LegalEntitySetupGrid(gridModel.LegalEntityGrid);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.LegalEntityGrid.DataBind(datacontextModel.LegalEntities);
        }

        private void LegalEntitySetupGrid(JQGrid grid)
        {
            SetUpGrid(grid, "LegalEntityGrid1", 
                Url.Action("LegalEntitySearchGridDataRequested"),
                Url.Action("LegalEntityEditRows"));

            grid.ToolBarSettings.ShowDeleteButton = false;
        }

        public ActionResult LegalEntityEditRows(LegalEntity editedItem)
        {
            // Get the grid and database models
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();

            // If we are in "Edit" mode
            if (gridModel.LegalEntityGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {
                // Get the data from and find the item corresponding to the edited row
                LegalEntity item = (from x in datacontextModel.LegalEntities
                                    where x.LegalEntityId == editedItem.LegalEntityId
                               select x).First<LegalEntity>();

                // update the Order information
                UpdateLegalEntity(item, editedItem);
                
                datacontextModel.SaveChanges();
            }

            if (gridModel.LegalEntityGrid.AjaxCallBackMode == AjaxCallBackMode.AddRow)
            {
                // since we are adding a new item, create a new istance
                LegalEntity item = new LegalEntity();
                // set the new item information
                UpdateLegalEntity(item, editedItem);

                datacontextModel.LegalEntities.Add(item);
                datacontextModel.SaveChanges();
            }
            if (gridModel.LegalEntityGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {
                LegalEntity item = (from x in datacontextModel.LegalEntities
                                    where x.LegalEntityId == editedItem.LegalEntityId
                               select x)
                               .First<LegalEntity>();

                // delete the record                
                datacontextModel.LegalEntities.Remove(item);
                datacontextModel.SaveChanges();
            }

            return RedirectToAction("LegalEntity", "MyCompany");
        }

        private void UpdateLegalEntity(LegalEntity item, LegalEntity editedItem)
        {
            item.Name = editedItem.Name;
            item.Code = editedItem.Code;
            item.Phone = editedItem.Phone;
            item.Fax = editedItem.Fax;
            item.Email = editedItem.Email;
            item.IsVATPayer = editedItem.IsVATPayer;
            item.ActualAddress = editedItem.ActualAddress;
            item.Comment = editedItem.Comment;
            item.Director = editedItem.Director;
            item.ChiefAccountant = editedItem.ChiefAccountant;
        }

        #endregion

        #region MyEmployees
        public ActionResult MyEmployees()
        {
            ViewBag.Title = "Контакты";
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.MyEmployeesGrid;

            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            MyEmployeesSetupGrid(grid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data
        public JsonResult MyEmployeesSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            MyEmployeesSetupGrid(gridModel.MyEmployeesGrid);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.MyEmployeesGrid.DataBind(datacontextModel.UserProfiles);
        }

        private void MyEmployeesSetupGrid(JQGrid grid)
        {
            SetUpGrid(grid, "MyEmployeesGrid1",
                Url.Action("MyEmployeesSearchGridDataRequested"),
                Url.Action("MyEmployeesEditRows"));

            grid.ToolBarSettings.ShowDeleteButton = false;
            SetUpMyEmployeesDropDown(grid);
        }

        private void PrepareUsersData(UserProfile profile)
        {
            profile.UserName = (profile.UserName ?? String.Empty).Trim();
            profile.DisplayName = (profile.DisplayName ?? String.Empty).Trim();
            profile.UserEmail = (profile.UserEmail ?? String.Empty).Trim();
            profile.Surname = (profile.Surname ?? String.Empty).Trim();
            profile.Name = (profile.Name ?? String.Empty).Trim();
            profile.MiddleName = (profile.MiddleName ?? String.Empty).Trim();
            profile.Phone1 = (profile.Phone1 ?? String.Empty).Trim();
            profile.Phone2 = (profile.Phone2 ?? String.Empty).Trim();
            profile.Skype = (profile.Skype ?? String.Empty).Trim();
            profile.Comment = (profile.Comment ?? String.Empty).Trim();

            if (String.IsNullOrEmpty(profile.UserName))
                profile.UserName = profile.DisplayName;

            if (String.IsNullOrEmpty(profile.DisplayName))
                profile.DisplayName = profile.UserName;

            profile.UserName = StringHelper.Transliterate(profile.UserName, true);
        }

        private string ValidateUsersData(DbSet<UserProfile> dbSet, UserProfile profile, bool isNew)
        {
            if (String.IsNullOrEmpty(profile.UserName))
                return "Имя пользователя обязательно";

            if (String.IsNullOrEmpty(profile.DisplayName))
                return "Отображаемое имя обязательно";

            if (isNew)
            {
                UserProfile item = dbSet.Where(x => 
                    String.Compare(x.DisplayName, profile.DisplayName, StringComparison.OrdinalIgnoreCase) == 0
                    || x.UserName == profile.UserName).FirstOrDefault<UserProfile>();
                                 
                if (item != null)
                    return "Пользователь с таким именем существует";
            }
            else
            {
                UserProfile item = (from x in dbSet
                                    where x.UserId == profile.UserId
                                    select x).First<UserProfile>();

                // if DisplayName was changed
                if (item.DisplayName.ToLower() != profile.DisplayName.ToLower())
                {
                    if ((from x in dbSet
                         where x.DisplayName == profile.DisplayName
                         select x).FirstOrDefault<UserProfile>() != null)
                        return "Пользователь с таким именем существует";
                }

                // if UserName was changed
                if (item.UserName.ToLower() != profile.UserName.ToLower())
                {
                    if ((from x in dbSet
                         where x.UserName == profile.UserName
                         select x).FirstOrDefault<UserProfile>() != null)
                        return "Пользователь с таким именем существует";
                }
            }

            if (!String.IsNullOrEmpty(profile.UserEmail))
            {
                if (!ValidationHelper.IsValidEmail(profile.UserEmail))
                    return "Неверный формат email";
            }

            return String.Empty;
        }

        public ActionResult MyEmployeesEditRows(UserProfile editedItem)
        {
            // Get the grid and database models
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();

            // If we are in "Edit" mode
            if (gridModel.MyEmployeesGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {
                if (editedItem.UserName == "admin" && !User.IsInRole("admin"))
                    return gridModel.MyEmployeesGrid.ShowEditValidationMessage("Эту запись изменить нельзя");

                PrepareUsersData(editedItem);

                string validationMessage = ValidateUsersData(datacontextModel.UserProfiles, editedItem, false);
                if (!String.IsNullOrEmpty(validationMessage))
                    return gridModel.MyEmployeesGrid.ShowEditValidationMessage(validationMessage);


                // Get the data from and find the item corresponding to the edited row
                UserProfile item = (from x in datacontextModel.UserProfiles
                                   where x.UserId == editedItem.UserId
                                   select x).First<UserProfile>();
                if (editedItem.UserId == item.UserId)
                {
                    // update the item information
                    UpdateMyEmployees(item, editedItem);
                
                    datacontextModel.SaveChanges();
                    UpdateUserRole(datacontextModel, item);
                    logger.InfoFormat("изменён контакт {0}", editedItem.DisplayName);

                    // Change password if need it
                    if (!String.IsNullOrEmpty(editedItem.NewPassword))
                    {
                        string resetToken = WebSecurity.GeneratePasswordResetToken(editedItem.UserName);
                        WebSecurity.ResetPassword(resetToken, editedItem.NewPassword);
                        logger.InfoFormat("изменён пароль контакта {0}", editedItem.DisplayName);
                    }
                }
            }

            if (gridModel.MyEmployeesGrid.AjaxCallBackMode == AjaxCallBackMode.AddRow)
            {
                PrepareUsersData(editedItem);
                string validationMessage = ValidateUsersData(datacontextModel.UserProfiles, editedItem, true);
                if (!String.IsNullOrEmpty(validationMessage))
                    return gridModel.MyEmployeesGrid.ShowEditValidationMessage(validationMessage);
               
                    // since we are adding a new item, create a new istance
                    string newPassword = editedItem.NewPassword;
                    if (String.IsNullOrEmpty(newPassword))
                        editedItem.NewPassword = System.Web.Security.Membership.GeneratePassword(5, 1);

                    // Create membership account
                    WebSecurity.CreateUserAndAccount(editedItem.UserName, editedItem.NewPassword);
                    UserProfile item = (from x in datacontextModel.UserProfiles
                                        where x.UserName == editedItem.UserName
                                        select x).First<UserProfile>();
                    // set the new item information
                    UpdateMyEmployees(item, editedItem);

                    datacontextModel.SaveChanges();
                    UpdateUserRole(datacontextModel, item);
                    logger.InfoFormat("добавлен контакт {0} с паролем - {1}", editedItem.DisplayName, editedItem.NewPassword);
            }
            if (gridModel.MyEmployeesGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {
                UserProfile item = (from x in datacontextModel.UserProfiles
                                    where x.UserId == editedItem.UserId
                                    select x)
                               .First<UserProfile>();

                if (item.ContactTypeId == 1)
                    return gridModel.MyEmployeesGrid.ShowEditValidationMessage("Невозможно удалить сотрудника");

                // delete the record
                Membership.DeleteUser(item.UserName);
                logger.InfoFormat("удален контакт {0}", editedItem.DisplayName);
            }

            return RedirectToAction("MyEmployees", "MyCompany");
        }

        private void UpdateUserRole(SkladDataContext context, UserProfile item)
        {
            ContactType cType = context.ContactTypes.Where(x => x.ContactTypeId == item.ContactTypeId).FirstOrDefault();
            if (cType != null)
            {
                string[] allRoles = new string[] { "employee", "limitedemployee" };
                Roles.RemoveUserFromRoles(item.UserName, allRoles);
                if (String.Compare(cType.Name, "Сотрудник", true) == 0)
                {
                    Roles.AddUserToRole(item.UserName, allRoles[0]);
                } 
                else if ((String.Compare(cType.Name, "Менеджер", true) == 0) || (String.Compare(cType.Name, "Сотрудник с огр. правами", true) == 0))
                {
                    Roles.AddUserToRole(item.UserName, allRoles[1]);
                }
            }
        }

        private void UpdateMyEmployees(UserProfile item, UserProfile editedItem)
        {
            item.UserName = editedItem.UserName;
            item.DisplayName = editedItem.DisplayName;
            item.UserEmail = editedItem.UserEmail;
            item.Surname = editedItem.Surname;
            item.Name = editedItem.Name;
            item.MiddleName = editedItem.MiddleName;
            item.Phone1 = editedItem.Phone1;
            item.Phone2 = editedItem.Phone2;
            item.Skype = editedItem.Skype;
            item.Comment = editedItem.Comment;
            item.ContactTypeId = editedItem.ContactTypeId;

            item.LegalEntityId = editedItem.LegalEntityId;

            // update user role. one-to-one relationship
            foreach (var role in Roles.GetRolesForUser(editedItem.UserName))
                Roles.RemoveUserFromRole(editedItem.UserName, role);
        }

        private void SetUpMyEmployeesDropDown(JQGrid itemGrid)
        {
            // setup the grid search criteria for the columns
            JQGridColumn legalEntityColumn = itemGrid.Columns.Find(c => c.DataField == "LegalEntityId");
            legalEntityColumn.Editable = true;
            legalEntityColumn.EditType = EditType.DropDown;
            JQGridColumn contactTypeColumn = itemGrid.Columns.Find(c => c.DataField == "ContactTypeId");
            contactTypeColumn.Editable = true;
            contactTypeColumn.EditType = EditType.DropDown;
            
            // Populate the search dropdown only on initial request, in order to optimize performance
            if (itemGrid.AjaxCallBackMode == AjaxCallBackMode.RequestData)
            {
                var skladModel = new SkladDataContext();
                var legalEntitiesEditList = (from m in skladModel.LegalEntities select m).AsEnumerable()
                               .Select(x => new SelectListItem
                               {
                                   Text = x.Name,
                                   Value = x.LegalEntityId.ToString()
                               });

                legalEntityColumn.EditList = legalEntitiesEditList.ToList<SelectListItem>();
                legalEntityColumn.EditList.Insert(0, new SelectListItem { Text = "(Иная)", Value = "" });

                var contactTypeEditList = (from m in skladModel.ContactTypes 
                                           orderby m.ContactTypeId descending select m).AsEnumerable()
                    .Select(x => new SelectListItem {
                        Text = x.Name,
                        Value = x.ContactTypeId.ToString()
                    });

                contactTypeColumn.EditList = contactTypeEditList.ToList<SelectListItem>();
                contactTypeColumn.SearchList = contactTypeEditList.ToList<SelectListItem>();
                contactTypeColumn.SearchList.Insert(0, new SelectListItem { Text = "Все", Value = "" });
        
            }
        }
 
        #endregion

        #region Warehouse
        public ActionResult Warehouse()
        {
            ViewBag.Title = "Склады";
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.WarehouseGrid;

            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            WarehouseSetupGrid(grid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data
        public JsonResult WarehouseSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            WarehouseSetupGrid(gridModel.WarehouseGrid);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.WarehouseGrid.DataBind(datacontextModel.Warehouses);
        }

        private void WarehouseSetupGrid(JQGrid grid)
        {
            SetUpGrid(grid, "WarehouseGrid1",
                Url.Action("WarehouseSearchGridDataRequested"),
                Url.Action("WarehouseEditRows"));

            grid.ToolBarSettings.ShowDeleteButton = false;
            SetUpWarehouseParentIdEditDropDown(grid);
        }

        public ActionResult WarehouseEditRows(Warehouse editedItem)
        {
            // Get the grid and database models
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();

            // If we are in "Edit" mode
            if (gridModel.WarehouseGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {
                // Get the data from and find the item corresponding to the edited row
                Warehouse item = (from x in datacontextModel.Warehouses
                                    where x.WarehouseId == editedItem.WarehouseId
                                    select x).First<Warehouse>();

                // update the item information
                UpdateWarehouse(item, editedItem);

                datacontextModel.SaveChanges();
            }

            if (gridModel.WarehouseGrid.AjaxCallBackMode == AjaxCallBackMode.AddRow)
            {
                // since we are adding a new item, create a new istance
                Warehouse item = new Warehouse();
                // set the new item information
                UpdateWarehouse(item, editedItem);

                datacontextModel.Warehouses.Add(item);
                datacontextModel.SaveChanges();
            }
            if (gridModel.WarehouseGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {
                Warehouse item = (from x in datacontextModel.Warehouses
                                    where x.WarehouseId == editedItem.WarehouseId
                                    select x)
                               .First<Warehouse>();

                // delete the record                
                datacontextModel.Warehouses.Remove(item);
                datacontextModel.SaveChanges();
            }

            return RedirectToAction("Warehouse", "MyCompany");
        }

        private void SetUpWarehouseParentIdEditDropDown(JQGrid itemGrid)
        {
            // setup the grid search criteria for the columns
            JQGridColumn itemColumn = itemGrid.Columns.Find(c => c.DataField == "ParentId");
            itemColumn.Editable = true;
            itemColumn.EditType = EditType.DropDown;


            itemColumn.EditList.Add(new SelectListItem { Text = "(нет)", Value = "null" });
            
            // Populate the search dropdown only on initial request, in order to optimize performance
            if (itemGrid.AjaxCallBackMode == AjaxCallBackMode.RequestData)
            {
                var skladModel = new SkladDataContext();
                var editList = (from m in skladModel.Warehouses select m).AsEnumerable()
                               .Select(x => new SelectListItem
                               {
                                   Text = x.Name,
                                   Value = x.WarehouseId.ToString()
                               });

                itemColumn.EditList.AddRange(editList.ToList<SelectListItem>());
            }
        }

        private void UpdateWarehouse(Warehouse item, Warehouse editedItem)
        {
            item.Name = editedItem.Name;
            item.Code = editedItem.Code;
            item.Address = editedItem.Address;
            item.Comment = editedItem.Comment;
            if (editedItem.WarehouseId != editedItem.ParentId)
                item.ParentId = editedItem.ParentId;
        }

        #endregion

        #region ContactList
        public ActionResult ContactList(int contractorId)
        {
            if (contractorId <= 0)
            { 
                // log error
                return null;
            }

            ContactListModel list = new ContactListModel();
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.MyEmployeesGrid;
            var datacontextModel = new SkladDataContext();

            var company = datacontextModel.Contractors
                .Where(x => x.ContractorId == contractorId).Include(x => x.Responsible).First();
            list.Company = company;

            ContactListSetupGrid(grid);

            list.Grid = grid;

            return View(list);
        }

        private void ContactListSetupGrid(JQGrid grid)
        {
            int contractorId = 0;
            Int32.TryParse(Request.QueryString["contractorId"], out contractorId);
            if (contractorId <= 0)
                return;

            SetUpGrid(grid, "ContactList1",
                Url.Action("ContactListSearchGridDataRequested", new { contractorId = contractorId }),
                Url.Action("ContactListEditRows"));

            SetUpContactListDropDown(grid);

            grid.Height = 100;
            grid.ToolBarSettings.ShowDeleteButton = true;
            grid.ToolBarSettings.ShowAddButton = false;
        }

        private void SetUpContactListDropDown(JQGrid itemGrid)
        {
            // setup the grid search criteria for the columns
            JQGridColumn legalEntityColumn = itemGrid.Columns.Find(c => c.DataField == "LegalEntityId");
            legalEntityColumn.Editable = false;
            JQGridColumn contactTypeColumn = itemGrid.Columns.Find(c => c.DataField == "ContactTypeId");
            contactTypeColumn.Visible = false;
            contactTypeColumn.Editable = false;

            JQGridColumn contactNameTypeColumn = itemGrid.Columns.Find(c => c.DataField == "ContactTypeName");
            contactNameTypeColumn.Visible = false;
        }

        // This method is called when the grid requests data
        public JsonResult ContactListSearchGridDataRequested()
        {
            int contractorId = 0;
            Int32.TryParse(Request.QueryString["contractorId"], out contractorId);
            if (contractorId <= 0)
                return null;

            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            ContactListSetupGrid(gridModel.MyEmployeesGrid);

            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc
            return gridModel.MyEmployeesGrid.DataBind(datacontextModel.Contractors
                .Where(x => x.ContractorId == contractorId).SelectMany(x => x.Users));
        }

        public ActionResult ContactListEditRows(UserProfile editedItem)
        {
            int contractorId = 0;

            Int32.TryParse(Request.QueryString["contractorId"], out contractorId);

            if (contractorId <= 0)
                return null;

            // Get the grid and database models
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();

            // If we are in "Edit" mode
            if (gridModel.MyEmployeesGrid.AjaxCallBackMode == AjaxCallBackMode.EditRow)
            {
                PrepareUsersData(editedItem);

                string validationMessage = ValidateUsersData(datacontextModel.UserProfiles, editedItem, false);
                if (!String.IsNullOrEmpty(validationMessage))
                    return gridModel.MyEmployeesGrid.ShowEditValidationMessage(validationMessage);

                // Get the data from and find the item corresponding to the edited row
                UserProfile item = (from x in datacontextModel.UserProfiles
                                    where x.UserId == editedItem.UserId
                                    select x).First<UserProfile>();

                if (item.ContactTypeId != 3)
                    return null;

                // update the item information
                UpdateMyEmployees(item, editedItem);

                datacontextModel.SaveChanges();
                logger.InfoFormat("контакт {0} изменён", item.DisplayName);

                // Change password if need it
                if (!String.IsNullOrEmpty(editedItem.NewPassword))
                {
                    string resetToken = WebSecurity.GeneratePasswordResetToken(editedItem.UserName);
                    WebSecurity.ResetPassword(resetToken, editedItem.NewPassword);
                    logger.InfoFormat("у контакта {0} был изменён пароль", editedItem.DisplayName);
                }
            }

            if (gridModel.MyEmployeesGrid.AjaxCallBackMode == AjaxCallBackMode.DeleteRow)
            {
               

                UserProfile item = (from x in datacontextModel.UserProfiles.Include(x => x.Contractors)
                                    where x.UserId == editedItem.UserId
                                    select x)
                               .First<UserProfile>();

                Contractor contractor = datacontextModel.Contractors
                    .Where(x => x.ContractorId == contractorId).FirstOrDefault<Contractor>();
                item.Contractors.Remove(contractor);
                datacontextModel.SaveChanges();
            }

            return RedirectToAction("ContactList", "MyCompany", new { contractorId = contractorId });
        }

        public JsonResult GetUsersByDisplayName(string term)
        {
            var datacontextModel = new SkladDataContext();

            var result = (from u in datacontextModel.UserProfiles
                          where u.DisplayName.ToLower().Contains(term.ToLower()) && u.ContactTypeId == 3
                          select new { u.UserId, u.DisplayName, u.Name, u.UserEmail, u.Surname, u.Phone1, u.Skype }).ToList();

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public void AddContactById(int contractorId, int userId)
        {
            if (contractorId <= 0 || userId <= 0)
                return;

            var datacontextModel = new SkladDataContext();

            UserProfile item = (from x in datacontextModel.UserProfiles.Include(x => x.Contractors)
                                where x.UserId == userId
                                select x)
                                 .First<UserProfile>();

            Contractor contractor = datacontextModel.Contractors
                .Where(x => x.ContractorId == contractorId).FirstOrDefault<Contractor>();

            item.Contractors.Add(contractor);
            datacontextModel.SaveChanges();
            logger.InfoFormat("у контрагента {0} появился контакт {1}", contractor.Code, item.DisplayName);
        }

        public void AddNewContact(int contractorId,
            string displayName,
            string name,
            string surname,
            string phone1,
            string userEmail,
            string skype)
        {
            if (contractorId <= 0 || String.IsNullOrEmpty(displayName))
                return;

            UserProfile item = new UserProfile() { DisplayName = displayName,
            Name = name, Surname = surname, Phone1 = phone1, UserEmail = userEmail, Skype = skype};

            var datacontextModel = new SkladDataContext();

            PrepareUsersData(item);
            item.ContactTypeId = 3;

            string validationMessage = ValidateUsersData(datacontextModel.UserProfiles, item, true);
            if (!String.IsNullOrEmpty(validationMessage))
            {
                logger.Error(validationMessage);
                return;
            }

            // since we are adding a new item, create a new istance
            item.NewPassword = System.Web.Security.Membership.GeneratePassword(5, 1);

            // Create membership account
            WebSecurity.CreateUserAndAccount(item.UserName, item.NewPassword);
            UserProfile newItem = (from x in datacontextModel.UserProfiles
                                where x.UserName == item.UserName
                                select x).First<UserProfile>();
            // set the new item information
            UpdateMyEmployees(newItem, item);

            Contractor contractor = datacontextModel.Contractors
              .Where(x => x.ContractorId == contractorId).FirstOrDefault<Contractor>();

            newItem.Contractors.Add(contractor);
            datacontextModel.SaveChanges();

            logger.InfoFormat("добавлен контакт {0} с паролем - {1}", item.DisplayName, item.NewPassword);
        }

        #endregion

        #region ContractorDetails
        public ActionResult ContractorDetails(int contractorId, DateTime? periodFrom, DateTime? periodTo)
        {
            if (contractorId <= 0)
            {
                // log error
                return null;
            }

            ContractorDetailsModel list = new ContractorDetailsModel();
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
         
                //.Where(x => x.Doc == contractorId).Include(x => x.Responsible).First();
            var company = datacontextModel.Contractors
                 .Where(x => x.ContractorId == contractorId).Include(x => x.Responsible).First();
            list.Company = company;


            ContractorDetailsSetupGrid(gridModel);
            list.DocumentGrid = gridModel.DocumentGrid;
            list.ProductLineGrid = gridModel.ProductLineGrid;
            return View(list);
        }


        public JsonResult TwoLevel_DocumentsDataRequested()
        {
            int contractorId = 0;
            Int32.TryParse(Request.QueryString["contractorId"], out contractorId);
            if (contractorId <= 0)
                return null;

            DateTime periodFrom = SqlDateTime.MinValue.Value, periodTo = SqlDateTime.MaxValue.Value;

            DateTime.TryParse(Request.QueryString["periodFrom"], out periodFrom);
            DateTime.TryParse(Request.QueryString["periodTo"], out periodTo);
            
            // Set default values
            if (periodTo < SqlDateTime.MaxValue.Value && periodTo > SqlDateTime.MinValue.Value)
                periodTo = periodTo.AddMonths(1);
            else
                periodTo = SqlDateTime.MaxValue.Value;

            if (!(periodFrom < SqlDateTime.MaxValue.Value && periodFrom > SqlDateTime.MinValue.Value))
                periodFrom = SqlDateTime.MinValue.Value;

            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladDataContext();
            var model = new SkladJqGridModel();
            ContractorDetailsSetupGrid(model);




            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc

            var contractor = gridModel.Contractors.Where(x => x.ContractorId == contractorId).FirstOrDefault();

            if (contractor == null)
                return null;

            IQueryable<Document> documentSet = GetContractorDocuments(gridModel, contractor, periodFrom, periodTo);
            //if (contractor.ContractorTypeId == (int)EntityEnum.ContractorTypeEnum.Factory) {

            //    var documentIds = gridModel.ProductLines.Where(x => x.Document.IsCommitted && 
                   
            //        x.SupplierId == contractor.ContractorId)
            //        .GroupBy(x => x.DocumentId).Select(k => k.Key).ToArray();
            //    documentSet = gridModel.Documents.Where(x => documentIds.Contains(x.DocumentId) && x.CreatedOf >= periodFrom && x.CreatedOf <= periodTo);
            //}
            //else
            //    documentSet = gridModel.Documents.Where(x => x.ContractorId == contractorId); 

            return model.DocumentGrid.DataBind(documentSet);
        }


        // parentRowID is automatically passed from the parent grid to the child grid. Note: parentRowID is case sensitive
        public JsonResult TwoLevel_ProductsDataRequested(int parentRowID)
        {
            int contractorId = 0;
            Int32.TryParse(Request.QueryString["contractorId"], out contractorId);
            if (contractorId <= 0)
                return null;
    
            var gridModel = new SkladDataContext();
            var model = new SkladJqGridModel();

            ContractorDetailsSetupGrid(model);

            var contractor = gridModel.Contractors.Where(x => x.ContractorId == contractorId).FirstOrDefault();

            if (contractor == null)
                return null;

            IQueryable<ProductLine> products = GetContractorDocuments(gridModel, parentRowID, contractor);
            //if (contractor.ContractorTypeId == (int)EntityEnum.ContractorTypeEnum.Factory)
            //{
            //    products = from o in gridModel.ProductLines
            //                   where o.DocumentId == parentRowID && o.SupplierId == contractorId
            //                   select o;
            //}
            //else
            //{
            //    products = from o in gridModel.ProductLines
            //               where o.DocumentId == parentRowID
            //               select o;
            //}

            return model.ProductLineGrid.DataBind(products);
        }



        private void ContractorDetailsSetupGrid(SkladJqGridModel model)
        {
            int contractorId = 0;
            Int32.TryParse(Request.QueryString["contractorId"], out contractorId);
            if (contractorId <= 0)
                return;

            var datacontextModel = new SkladDataContext();
            var contractor = datacontextModel.Contractors.Where(x => x.ContractorId == contractorId).FirstOrDefault();
            if (contractor == null)
                return;

            var documentsGrid = model.DocumentGrid;
            var productsGrid = model.ProductLineGrid;

            //DateTime periodFrom = SqlDateTime.MinValue.Value, periodTo = SqlDateTime.MaxValue.Value;

            //DateTime.TryParse(Request.QueryString["periodFrom"], out periodFrom);
            //DateTime.TryParse(Request.QueryString["periodTo"], out periodTo);

            string periodFrom = Request.QueryString["periodFrom"], periodTo = Request.QueryString["periodTo"];

            documentsGrid.ID = "Documents1";
            documentsGrid.DataUrl = Url.Action("TwoLevel_DocumentsDataRequested", new { contractorId = contractorId,
                                                                                        periodFrom = periodFrom,
                                                                                        periodTo = periodTo
            });
            documentsGrid.ClientSideEvents.SubGridRowExpanded = "showProductsSubGrid";
            documentsGrid.ToolBarSettings.ShowDeleteButton = false;
            documentsGrid.ToolBarSettings.ShowAddButton = false;
            documentsGrid.ToolBarSettings.ShowEditButton = false;

            documentsGrid.HierarchySettings.HierarchyMode = HierarchyMode.Parent;
            documentsGrid.HierarchySettings.ReloadOnExpand = true;
            documentsGrid.HierarchySettings.SelectOnExpand = true;

         
            /*documentsGrid.HierarchySettings.PlusIcon = Convert.ToString(ViewData["plusIcon"]);
            documentsGrid.HierarchySettings.MinusIcon = Convert.ToString(ViewData["minusIcon"]);
            documentsGrid.HierarchySettings.OpenIcon = Convert.ToString(ViewData["openIcon"]);*/

            productsGrid.ID = "Products1";
            productsGrid.DataUrl = Url.Action("TwoLevel_ProductsDataRequested", new { contractorId = contractorId });
            productsGrid.HierarchySettings.HierarchyMode = HierarchyMode.Child;

            JQGridColumn documentColumn1 = documentsGrid.Columns.Find(c => c.DataField == "ContractorName");

            JQGridColumn documentColumn2 = documentsGrid.Columns.Find(c => c.DataField == "ContractorId");
            JQGridColumn documentColumn3 = documentsGrid.Columns.Find(c => c.DataField == "Sum");
            JQGridColumn documentColumn4 = documentsGrid.Columns.Find(c => c.DataField == "SaleSum");
            JQGridColumn productsColumn1 = documentsGrid.Columns.Find(c => c.DataField == "SaleSum");
       
            if (contractor.ContractorTypeId == (int)EntityEnum.ContractorTypeEnum.Factory)
            {
                documentColumn1.Visible = true;
                documentColumn2.Visible = true;
                documentColumn3.Visible = false;
                documentColumn4.Visible = false;
                productsGrid.Height = Unit.Pixel(70);
                documentsGrid.HierarchySettings.ExpandOnLoad = true;
            }

            else {
                documentColumn1.Visible = false;
                documentColumn2.Visible = false;
                documentsGrid.HierarchySettings.ExpandOnLoad = false;
            }

            //SetUpGrid(grid, "ContractorDetails1",
            //    Url.Action("ContractorDetailsSearchGridDataRequested", new { contractorId = contractorId }),
            //    Url.Action("ContractorDetailsEditRows"));

            ////SetUpContactListDropDown(grid);

            //grid.Height = 100;
            //grid.ToolBarSettings.ShowDeleteButton = false;
            //grid.ToolBarSettings.ShowAddButton = false;
            //grid.ToolBarSettings.ShowEditButton = false;
        }

        #endregion

        private void SetUpGrid(JQGrid grid, string gridID, string dataUrl, string editUrl)
        {
            // Customize/change some of the default settings for this model
            // ID is a mandatory field. Must by unique if you have several grids on one page.
            grid.ID = gridID;

            // Setting the DataUrl to an action (method) in the controller is required.
            // This action will return the data needed by the grid
            grid.DataUrl = dataUrl;
            grid.EditUrl = editUrl;
            // show the search toolbar
            grid.ToolBarSettings.ShowSearchToolBar = true;

            grid.ToolBarSettings.ShowEditButton = true;
            grid.ToolBarSettings.ShowAddButton = true;
            grid.ToolBarSettings.ShowDeleteButton = true;
            grid.EditDialogSettings.CloseAfterEditing = true;
            grid.AddDialogSettings.CloseAfterAdding = true;
        }

        private IQueryable<Document> GetContractorDocuments(SkladDataContext datacontextModel,
            Contractor contractor, DateTime? periodFrom, DateTime? periodTo, bool refundsShipmentOnly = true)
        {
            IQueryable<Document> documentSet;
            if (contractor.ContractorTypeId == (int)EntityEnum.ContractorTypeEnum.Factory)
            {

                var documentIds = datacontextModel.ProductLines.Where(x => x.Document.IsCommitted &&

                    x.SupplierId == contractor.ContractorId)
                    .GroupBy(x => x.DocumentId).Select(k => k.Key).ToArray();
                if (!refundsShipmentOnly)
                    documentSet = datacontextModel.Documents.Where(x => documentIds.Contains(x.DocumentId) && x.CreatedOf >= periodFrom && x.CreatedOf <= periodTo);
                else
                    documentSet = datacontextModel.Documents.Where(x => documentIds.Contains(x.DocumentId) && x.CreatedOf >= periodFrom && x.CreatedOf <= periodTo
                        && (x.DocumentTypeId == (int)EntityEnum.DocumentTypeEnum.Refunds || x.DocumentTypeId == (int)EntityEnum.DocumentTypeEnum.Shipment));
            }
            else
            {   if(!refundsShipmentOnly)
                    documentSet = datacontextModel.Documents.Where(x => x.ContractorId == contractor.ContractorId);
                else
                    documentSet = datacontextModel.Documents.Where(x => x.ContractorId == contractor.ContractorId
                         && (x.DocumentTypeId == (int)EntityEnum.DocumentTypeEnum.Refunds || x.DocumentTypeId == (int)EntityEnum.DocumentTypeEnum.Shipment));
            }
            return documentSet;
        }

        private IQueryable<ProductLine> GetContractorDocuments(SkladDataContext datacontextModel, int documentId, Contractor contractor)
        {
            IQueryable<ProductLine> products = null;
            if (contractor.ContractorTypeId == (int)EntityEnum.ContractorTypeEnum.Factory)
            {
                products = from o in datacontextModel.ProductLines
                           where o.DocumentId == documentId && o.SupplierId == contractor.ContractorId
                           select o;
            }
            else
            {
                products = from o in datacontextModel.ProductLines
                           where o.DocumentId == documentId
                           select o;
            }

            return products;
        }

        public string GetContractorPrintReportFileLink(int contractorId, DateTime? periodFrom, DateTime? periodTo)
        {
            if (contractorId <= 0)
                return Constants.ErrorUrl;

            var datacontextModel = new SkladDataContext();
            var contractor = datacontextModel.Contractors
             .Where(x => x.ContractorId == contractorId).Include(x => x.Responsible).First();


            if (contractor == null)
                return Constants.ErrorUrl;

            var documentSet = GetContractorDocuments(datacontextModel, contractor, periodFrom, periodTo, true).ToList();
            int grandTotalQuantity = 0;
            if (documentSet.Count == 0)
                return Constants.ErrorUrl;

            foreach (var document in documentSet)
            {
                var productLines = GetContractorDocuments(datacontextModel, document.DocumentId, contractor);

                document.ProductsFilteredList = new List<ProductLine>();
                document.ProductsFilteredList = productLines.ToList();
                document.TotalQuantity = productLines.Sum(x => x.Quantity);
                grandTotalQuantity += document.TotalQuantity;
                    //
            }

            return GetSaleReportByContractorFile(contractor, documentSet, grandTotalQuantity, periodFrom, periodTo);
        }

        private string GetSaleReportByContractorFile(Contractor contractor,
           List<Document> documents,
           int grandTotalQuantity, DateTime? periodFrom, DateTime? periodTo)
        {
            string relativePath = "../" + Constants.SalesByContractorReportPath;
            string rootPath = Server.MapPath(relativePath);
            string reportFile = String.Empty;

            // Check if file already exists. 
            // Than check Modified date of the file in file name
            string docPath = Path.Combine(rootPath, contractor.ContractorId.ToString());

            if (!Directory.Exists(docPath))
                Directory.CreateDirectory(docPath);

          //  string dateSeparator = "-";
            string extension = ".xls";
            string mask = String.Format("{0}*{1}", Constants.SalesByContractorReportPrefix, extension);

            var directory = new DirectoryInfo(docPath);
            // get last created file in directory
            var existingFile = directory.GetFiles(mask).OrderByDescending(f => f.LastWriteTime).FirstOrDefault();

            // check if file is actual upon document modified date
            if (existingFile != null)
            {
                // Cache 1 minute
                if (existingFile.CreationTime.AddSeconds(10) > DateTime.Now)
                {
                    // return cached file
                    return String.Format("{0}/{1}/{2}", relativePath, contractor.ContractorId.ToString(), 
                         existingFile.Name);
                }
                else
                {
                    // delete outdate file
                    existingFile.Delete();
                }
            }

            string fileName = String.Format("{0}{1}", Constants.SalesByContractorReportPrefix,
                extension);

            // create report
            ExcelReportInfo reportInfo = new ExcelReportInfo
            {
                CreatedOf = DateTime.Now,
                FileName = fileName,
                FilePath = docPath,
                DocumentSubject = "Список документов для " + contractor.Name + "(" + contractor.Code + ")",
                SheetName = Constants.SalesByContractorReportPrefix,
                TitleLeft = contractor.Code,
                TitleCenter = (periodFrom != null ? "За период "+periodFrom.Value.ToString("dd.MM.yyyy") : "")
                + (periodTo != null ? "-" + periodTo.Value.ToString("dd.MM.yyyy") : "") + " Общее кол-во: " + grandTotalQuantity,
                TitleRight = ""
            };

            ReportHelper.GenerateContractorSalesReport(documents, reportInfo);
            // ../Reports/Document/1093/e4fmt/Report-2014-10-09.xls
            //  /Reports/Refunds/RefundsReport-2014-10-09.xls
            reportFile = String.Format("{0}/{1}/{2}", relativePath, contractor.ContractorId.ToString(), 
                fileName);
            
            return reportFile;
        }

        public JsonResult GetManagerByDisplayName(string term)
        {
            var datacontextModel = new SkladDataContext();

            var result = (from u in datacontextModel.UserProfiles
                          where u.DisplayName.ToLower().Contains(term.ToLower()) && (u.ContactTypeId ==
                          (int)EntityEnum.ContactTypeEnum.Manager 
                          || u.ContactTypeId == (int)EntityEnum.ContactTypeEnum.Employee
                          )
                          select new { u.DisplayName, u.UserId }).ToList();

            return Json(result, JsonRequestBehavior.AllowGet);
        }
    }
}
