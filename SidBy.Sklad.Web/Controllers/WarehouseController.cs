using log4net;
using SidBy.Sklad.DataAccess;
using SidBy.Sklad.Domain;
using SidBy.Sklad.Domain.Enums;
using SidBy.Sklad.Web.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Trirand.Web.Mvc;

namespace SidBy.Sklad.Web.Controllers
{
    [System.Web.Mvc.Authorize(Roles = "admin,employee")]
    public class WarehouseController : Controller
    {
        private readonly ILog logger;

        public WarehouseController()
        {
            logger = LogManager.GetLogger(GetType());
        }

        #region Posting

        public ActionResult Posting()
        {
            ViewBag.Title = "Оприходования";
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.DocumentGrid;

            //// NOTE: you need to call this method in the action that fetches the data as well,
            //// so that the models match
            PostingSetupGrid(grid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data
        public JsonResult PostingSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            PostingSetupGrid(gridModel.DocumentGrid);

            return gridModel.DocumentGrid.DataBind(datacontextModel.Documents.Where(x =>
                x.DocumentTypeId == (int)EntityEnum.DocumentTypeEnum.Posting));
        }

        private void PostingSetupGrid(JQGrid grid)
        {
            SetUpGrid(grid, "PostingGrid1",
                Url.Action("PostingSearchGridDataRequested"),
                Url.Action("DocumentItemEditRows", "Home"));
        }

        #endregion

        #region Cancellation

        public ActionResult Cancellation()
        {
            ViewBag.Title = "Списания";
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new SkladJqGridModel();
            var grid = gridModel.DocumentGrid;

            //// NOTE: you need to call this method in the action that fetches the data as well,
            //// so that the models match
            CancellationSetupGrid(grid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data
        public JsonResult CancellationSearchGridDataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new SkladJqGridModel();
            var datacontextModel = new SkladDataContext();
            // customize the default grid model with our custom settings
            CancellationSetupGrid(gridModel.DocumentGrid);

            return gridModel.DocumentGrid.DataBind(datacontextModel.Documents.Where(x =>
                x.DocumentTypeId == (int)EntityEnum.DocumentTypeEnum.Cancellation));
        }

        private void CancellationSetupGrid(JQGrid grid)
        {
            SetUpGrid(grid, "CancellationGrid1",
                Url.Action("CancellationSearchGridDataRequested"),
                Url.Action("DocumentItemEditRows", "Home"));

        }

        #endregion

        private void SetUpGrid(JQGrid grid, string gridID, string dataUrl, string editUrl)
        {
            // Customize/change some of the default settings for this model
            // ID is a mandatory field. Must by unique if you have several grids on one page.
            grid.ID = gridID;

            // Setting the DataUrl to an action (method) in the controller is required.
            // This action will return the data needed by the grid
            grid.DataUrl = dataUrl;
            grid.EditUrl = editUrl;
            // show the search toolbar
            grid.ToolBarSettings.ShowSearchToolBar = true;
            grid.ToolBarSettings.ShowDeleteButton = true;
            grid.EditDialogSettings.CloseAfterEditing = true;
            grid.ToolBarSettings.ShowAddButton = false;
            grid.AddDialogSettings.CloseAfterAdding = true;
        }
    }
}
